<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="48" failures="0" errors="0" time="1.659">
  <testsuite name="findUniqueCaseInsensitiveStrings" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="0.783" tests="5">
    <testcase classname="findUniqueCaseInsensitiveStrings should return only the strings that are unique from the array." name="findUniqueCaseInsensitiveStrings should return only the strings that are unique from the array." time="0.001">
    </testcase>
    <testcase classname="containsStringAnyCase should return true if the array contains the string in any case." name="containsStringAnyCase should return true if the array contains the string in any case." time="0">
    </testcase>
    <testcase classname="containsStringAnyCase should return false if the array does not contain the value." name="containsStringAnyCase should return false if the array does not contain the value." time="0.001">
    </testcase>
    <testcase classname="containsAnyStringAnyCase should return true if the array contains any of the input strings in any case." name="containsAnyStringAnyCase should return true if the array contains any of the input strings in any case." time="0">
    </testcase>
    <testcase classname="containsAnyStringAnyCase should return false if the array does not contain any of the input values." name="containsAnyStringAnyCase should return false if the array does not contain any of the input values." time="0">
    </testcase>
  </testsuite>
  <testsuite name="jestTestContextBuilder" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="0.801" tests="4">
    <testcase classname="jestTestContextBuilder should return a builder function" name="jestTestContextBuilder should return a builder function" time="0.001">
    </testcase>
    <testcase classname="jestTestContextBuilder JestTestContextBuilderFunction should create a new test context with no config provided." name="jestTestContextBuilder JestTestContextBuilderFunction should create a new test context with no config provided." time="0">
    </testcase>
    <testcase classname="jestTestContextBuilder JestTestContextBuilderFunction using test builder should be configured with the input configuration." name="jestTestContextBuilder JestTestContextBuilderFunction using test builder should be configured with the input configuration." time="0">
    </testcase>
    <testcase classname="jestTestContextBuilder JestTestContextBuilderFunction using test builder should provide access to the instance via the fixture" name="jestTestContextBuilder JestTestContextBuilderFunction using test builder should provide access to the instance via the fixture" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="areEqualObjectValues" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="0.82" tests="3">
    <testcase classname="areEqualObjectValues should return true if both objects are equal." name="areEqualObjectValues should return true if both objects are equal." time="0.002">
    </testcase>
    <testcase classname="areEqualObjectValues should return false if both objects have the same properties but are not equal." name="areEqualObjectValues should return false if both objects have the same properties but are not equal." time="0">
    </testcase>
    <testcase classname="areEqualObjectValues should return false if both objects are not equal." name="areEqualObjectValues should return false if both objects are not equal." time="0">
    </testcase>
  </testsuite>
  <testsuite name="restoreOrder" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="0.824" tests="4">
    <testcase classname="restoreOrder restoreOrder() should restore the order of values in the array." name="restoreOrder restoreOrder() should restore the order of values in the array." time="0.001">
    </testcase>
    <testcase classname="restoreOrder restoreOrderWithValues() should restore the order of values in the array." name="restoreOrder restoreOrderWithValues() should restore the order of values in the array." time="0.001">
    </testcase>
    <testcase classname="restoreOrder restoreOrderWithValues() with new values should insert the new values in the order they are presented." name="restoreOrder restoreOrderWithValues() with new values should insert the new values in the order they are presented." time="0.001">
    </testcase>
    <testcase classname="restoreOrder restoreOrderWithValues() with new values excludeNewItems is true should not insert the new items." name="restoreOrder restoreOrderWithValues() with new values excludeNewItems is true should not insert the new items." time="0">
    </testcase>
  </testsuite>
  <testsuite name="jestTestContextBuilder" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="0.859" tests="8">
    <testcase classname="jestTestContextBuilder should return a builder function" name="jestTestContextBuilder should return a builder function" time="0.002">
    </testcase>
    <testcase classname="jestTestContextBuilder JestTestContextBuilderFunction should create a new test context with no config provided." name="jestTestContextBuilder JestTestContextBuilderFunction should create a new test context with no config provided." time="0">
    </testcase>
    <testcase classname="jestTestContextBuilder JestTestContextBuilderFunction using test builder should be configured with the input configuration." name="jestTestContextBuilder JestTestContextBuilderFunction using test builder should be configured with the input configuration." time="0">
    </testcase>
    <testcase classname="jestTestContextBuilder JestTestContextBuilderFunction using test builder should provide access to the instance via the fixture" name="jestTestContextBuilder JestTestContextBuilderFunction using test builder should provide access to the instance via the fixture" time="0.001">
    </testcase>
    <testcase classname="wrapJestTestContextFactory() should create a function for wrapping a factory." name="wrapJestTestContextFactory() should create a function for wrapping a factory." time="0">
    </testcase>
    <testcase classname="wrapJestTestContextFactory() wrapper should wrap a factory" name="wrapJestTestContextFactory() wrapper should wrap a factory" time="0.001">
    </testcase>
    <testcase classname="wrapJestTestContextFactory() wrapper wrapped factory with tests executed within test context should execute our setup wrap" name="wrapJestTestContextFactory() wrapper wrapped factory with tests executed within test context should execute our setup wrap" time="0">
    </testcase>
    <testcase classname="wrapJestTestContextFactory() wrapper wrapped factory with tests executed outside test context should not execute our setup wrap" name="wrapJestTestContextFactory() wrapper wrapped factory with tests executed outside test context should not execute our setup wrap" time="0">
    </testcase>
  </testsuite>
  <testsuite name="takeLast" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="0.902" tests="7">
    <testcase classname="takeLast should take the last elements" name="takeLast should take the last elements" time="0.002">
    </testcase>
    <testcase classname="takeLast should take the last elements and keep the specified number of elements in the front" name="takeLast should take the last elements and keep the specified number of elements in the front" time="0.002">
    </testcase>
    <testcase classname="takeLast longer take should take the last elements" name="takeLast longer take should take the last elements" time="0.002">
    </testcase>
    <testcase classname="takeLast longer array should take the last elements and keep the specified number of elements in the front" name="takeLast longer array should take the last elements and keep the specified number of elements in the front" time="0.002">
    </testcase>
    <testcase classname="takeLast longer array should take the last elements and keep the specified number of elements in the front more" name="takeLast longer array should take the last elements and keep the specified number of elements in the front more" time="0.003">
    </testcase>
    <testcase classname="mergeIntoArray should add the values from the second array into the target array in the same order." name="mergeIntoArray should add the values from the second array into the target array in the same order." time="0.005">
    </testcase>
    <testcase classname="mergeIntoArray should add the values from the second and third array into the target array in the same order." name="mergeIntoArray should add the values from the second and third array into the target array in the same order." time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ModelRelationUtility" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="1.103" tests="9">
    <testcase classname="ModelRelationUtility addToCollection() should add the new item" name="ModelRelationUtility addToCollection() should add the new item" time="0.002">
    </testcase>
    <testcase classname="ModelRelationUtility modifyCollection() singleType ADD should add the new item" name="ModelRelationUtility modifyCollection() singleType ADD should add the new item" time="0.001">
    </testcase>
    <testcase classname="ModelRelationUtility modifyCollection() singleType ADD should replace any existing item with the same key." name="ModelRelationUtility modifyCollection() singleType ADD should replace any existing item with the same key." time="0">
    </testcase>
    <testcase classname="ModelRelationUtility modifyCollection() singleType SET should set the new item as the only value" name="ModelRelationUtility modifyCollection() singleType SET should set the new item as the only value" time="0">
    </testcase>
    <testcase classname="ModelRelationUtility modifyCollection() multiType ADD should add the new item" name="ModelRelationUtility modifyCollection() multiType ADD should add the new item" time="0.001">
    </testcase>
    <testcase classname="ModelRelationUtility modifyCollection() multiType ADD should replace any existing item with the same key." name="ModelRelationUtility modifyCollection() multiType ADD should replace any existing item with the same key." time="0">
    </testcase>
    <testcase classname="ModelRelationUtility modifyCollection() multiType SET should set the new item as the only item" name="ModelRelationUtility modifyCollection() multiType SET should set the new item as the only item" time="0">
    </testcase>
    <testcase classname="ModelRelationUtility modifyCollection() multiType SET should replace any existing item with the same key." name="ModelRelationUtility modifyCollection() multiType SET should replace any existing item with the same key." time="0">
    </testcase>
    <testcase classname="ModelRelationUtility modifyCollection() multiType SET with mask type &quot;a&quot; mask function should set the values on the a type" name="ModelRelationUtility modifyCollection() multiType SET with mask type &quot;a&quot; mask function should set the values on the a type" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="HashSet" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="1.261" tests="3">
    <testcase classname="HashSet with dates should keep only unique dates." name="HashSet with dates should keep only unique dates." time="0.001">
    </testcase>
    <testcase classname="HashSet with dates should add dates." name="HashSet with dates should add dates." time="0">
    </testcase>
    <testcase classname="HashSet with dates should remove dates." name="HashSet with dates should remove dates." time="0">
    </testcase>
  </testsuite>
  <testsuite name="performTaskLoop()" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:38" time="1.285" tests="4">
    <testcase classname="performTaskLoop() should loop until checkContinue() returns false." name="performTaskLoop() should loop until checkContinue() returns false." time="0.001">
    </testcase>
    <testcase classname="performTaskLoop() should return the inital value if the check fails on the first call." name="performTaskLoop() should return the inital value if the check fails on the first call." time="0">
    </testcase>
    <testcase classname="performTaskLoop() should loop until an error occurs in next." name="performTaskLoop() should loop until an error occurs in next." time="0">
    </testcase>
    <testcase classname="performTaskLoop() should loop until an error occurs in checkContinue." name="performTaskLoop() should loop until an error occurs in checkContinue." time="0">
    </testcase>
  </testsuite>
  <testsuite name="keepValuesFromArray" errors="0" failures="0" skipped="0" timestamp="2022-01-28T03:02:39" time="0.559" tests="1">
    <testcase classname="keepValuesFromArray should keep values from the array." name="keepValuesFromArray should keep values from the array." time="0.001">
    </testcase>
  </testsuite>
</testsuites>