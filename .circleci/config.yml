version: 2.1 # use CircleCI 2.1

# YAML trick
defaults: &defaults
  working_directory: ~/code # "code" is our working directory
  resource_class: medium+
  docker:
    - image: cimg/node:16.13

# https://circleci.com/blog/config-best-practices-dependency-caching/

orbs:
  nx: nrwl/nx@1.1.3
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      # look for existing cache and restore if found
      - restore_cache:
          keys:
            - node-cache-{{ checksum "package-lock.json" }}
            - node-cache-
      # install dependencies
      - run:
          name: install dependencies
          command: npm install
      # save any changes to the cache
      - save_cache:
          key: node-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      # initialize nx
      - nx/set-shas
      # build content
      - run: npx nx affected --base=$NX_BASE --target=build --parallel --max-parallel=2
      - run: npx nx affected --base=$NX_BASE --target=build-for-npm --parallel --max-parallel=2
      # prune node_modules
      - run: npx clean-modules --yes --exclude "**/firebase*/**"
      # persist builds to workspace
      - persist_to_workspace:
          root: ~/code
          paths:
            - node_modules
            - dist
  # Runs tests for the projects that do not require the firebase emulators.
  test-with-node:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: run util tests
          command: npx nx test util
      - run:
          name: run rxjs tests
          command: npx nx test rxjs
      - run:
          name: run date tests
          command: npx nx test date
      - run:
          name: run dbx-core tests
          command: npx nx test dbx-core
      - run:
          name: run dbx-web tests
          command: npx nx test dbx-web
      - run:
          name: run dbx-form tests
          command: npx nx test dbx-form
      - store_test_results:
          path: ~/code/.reports/jest/
  # Runs tests for the projects that require the firebase emulators.
  test-with-node-firebase:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run: sudo apt-get update -y && sudo apt-get install -y curl openjdk-11-jre-headless
      - restore_cache:
          key: firebase-cache-
      - run:
          name: run firebase tests
          command: npx firebase emulators:exec --only auth,firestore,storage 'npx nx run-tests firebase'
      - run:
          name: run dbx-firebase tests
          command: npx firebase emulators:exec --only auth,firestore,storage 'npx nx run-tests dbx-firebase'
      - save_cache:
          key: firebase-cache-
          paths:
            - ~/.cache/firebase/emulators
      - store_test_results:
          path: ~/code/.reports/jest/
  # Performs release operations on the release branch.
  run-release-and-push-to-main:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - add_ssh_keys:
          fingerprints:
            - "d9:53:28:55:d6:96:4e:1e:d1:53:5e:79:e4:80:7e:28"
      - run:
          name: setup git
          command: git config user.email "ci@dereekb.com" && git config user.name "ci"
      - run:
          name: build release
          command: npx nx run workspace:version
      - run:
          name: merge release into main and use the release commit message
          command: git checkout main && git merge release --squash -Xtheirs && git commit -m "$(git log release --pretty=%B | cat)"
      - run:
          name: push main to origin
          command: git push
  deploy-demo:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: deploy updated projects
          command: npx nx affected --target=deploy # deploy any updated projects
  # Publishes content to npm. This should occur after running a release.
  publish-to-npm:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/code
      - run:
          name: configure npmrc / npm login
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/code/.npmrc
      - run: npx nx affected --target=publish-npmjs --all
# --- WORKFLOWS ---
workflows:
  version: 2
  # builds and tests the content. Occurs on every branch.
  build-and-test-and-version:
    jobs:
      - build
      - test-with-node:
          requires:
            - build
      - test-with-node-firebase:
          requires:
            - build
      - run-release-and-push-to-main:
          requires:
            - build
            - test-with-node
            - test-with-node-firebase
          filters:
            branches:
              only: release
  # Publishes to npm
  publish:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - deploy-demo:
          filters:
            branches:
              only: main
      - publish-to-npm:
          filters:
            branches:
              only: main
