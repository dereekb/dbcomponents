@use 'sass:map';
@use 'sass:color';
@use '../../../style/theming';

// MARK: Variables
$anchor-list-item-disabled-item-opacity: 45%;
$anchor-list-item-muted-opacity: 74%;
$anchor-list-item-parent-active-opacity: 90%;
$anchor-list-item-active-opacity: 100%;

$active-root-item-left-padding: 2px;
$active-child-item-left-padding: 5px;

// MARK: Mixin
@mixin core() {
  .dbx-anchor-list.mat-mdc-nav-list {
    padding-top: 0; // no padding

    .mat-mdc-list-item {
      .mat-icon.mat-mdc-list-item-icon.mdc-list-item__start {
        // fix the icon alignment for items that are larger than the expected size
        align-self: center;
        margin-top: 0;
      }

      .mdc-list-item__content .mat-mdc-list-item-unscoped-content.mdc-list-item__secondary-text::before {
        // ensure the custom content follows the text content shortly after
        content: unset;
      }
    }
  }
}

@mixin color($theme-config) {
  $color-config: theming.get-color-config($theme-config);
  $foreground: map.get($color-config, 'foreground');
  $primary: map.get($color-config, 'primary');

  $background: map.get($color-config, 'background');
  $background-hover-color: theming.get-color-from-palette($background, 'hover');
  $background-disabled-color: theming.get-color-from-palette($background, 'contrast');

  .dbx-anchor-list.mat-mdc-nav-list {
    --mat-divider-color: #{color.scale($color: $background-hover-color, $alpha: 15%)};

    // MARK: Muting
    // items that are not active are muted
    .mat-mdc-list-item {
      opacity: #{$anchor-list-item-muted-opacity};

      &.mdc-list-item--disabled {
        opacity: #{$anchor-list-item-disabled-item-opacity};
        // background: transparent;
      }
    }

    // active route as a parent
    .dbx-anchor-active {
      .mat-mdc-list-item {
        opacity: #{$anchor-list-item-parent-active-opacity};
      }
    }

    // selected
    .dbx-anchor-selected {
      .mat-mdc-list-item {
        opacity: #{$anchor-list-item-active-opacity};
        background: color.scale($color: $background-hover-color, $alpha: 10%);
      }
    }

    // active route
    .dbx-anchor-active-eq {
      .mat-mdc-list-item {
        opacity: #{$anchor-list-item-active-opacity};
        background: color.scale($color: $background-hover-color, $alpha: 25%);
      }
    }

    // MARK: Anchor Tree
    .dbx-anchor-list-child .mat-mdc-list-item {
      background: color.scale($background-hover-color, $alpha: 10%);
    }
  }
}

@mixin typography($theme-config-or-typography-config) {
  .dbx-anchor-list.mat-mdc-nav-list {
    .mat-mdc-list-item .mat-mdc-list-item-icon {
      font-size: 28px;
      width: 28px;
      height: 28px;
      padding: $active-root-item-left-padding;
    }

    // MARK: Anchor Tree
    .dbx-anchor-list-child .mat-mdc-list-item {
      font-size: 0.875em;

      .mat-mdc-list-item-icon {
        font-size: 22px;
        width: 22px;
        height: 22px;
        padding: $active-child-item-left-padding;
      }
    }
  }
}

@mixin theme($theme-config) {
  @include theming.private-check-duplicate-theme-styles($theme-config, 'dbx-router-anchorlist') {
    $color: theming.get-color-config($theme-config);
    $density: theming.get-density-config($theme-config);
    $typography: theming.get-typography-config($theme-config);

    @if $color !=null {
      @include color($theme-config);
    }

    @if $typography !=null {
      @include typography($theme-config);
    }
  }
}
