import { PromiseOrValue } from '@dereekb/util';
import { INestApplicationContext } from '@nestjs/common';
import * as functions from 'firebase-functions';
import { EventContext } from 'firebase-functions';
import { MakeNestContext, NestApplicationFunctionFactory, NestApplicationPromiseGetter } from '../../nest.provider';

// MARK: Event
export type FirestoreEventHandler<I = any, O = any> = (data: I, context: EventContext) => PromiseOrValue<O>;
export type NestApplicationEventHandler<I = any, O = any> = (nest: INestApplicationContext, data: I, context: EventContext) => PromiseOrValue<O>;
export type NestApplicationEventHandlerBuilder<I = any, O = any> = (handler: NestApplicationEventHandler<I, O>) => FirestoreEventHandler<I, O>;

export type OnEventWithNestApplicationBuilder<I = any, O = any> = (nest: NestApplicationEventHandlerBuilder<I, O>) => functions.CloudFunction<O>;

/**
 * Factory function for generating a CloudFunctionHandler via a NestApplicationCloudFunctionHandler.
 */
export type OnEventWithNestApplicationFactory = <I, O>(fn: OnEventWithNestApplicationBuilder<I, O>) => NestApplicationFunctionFactory<functions.CloudFunction<O>>;

/**
 * Creates a factory for generating OnEventWithNestApplicationBuilder values.
 * 
 * @param nestAppPromiseGetter 
 * @returns 
 */
export function onEventWithNestApplicationFactory(): OnEventWithNestApplicationFactory {
  return <I, O>(fn: OnEventWithNestApplicationBuilder<I, O>) => {
    return (nestAppPromiseGetter: NestApplicationPromiseGetter) => {
      const handlerBuilder: NestApplicationEventHandlerBuilder<I, O> = (handler) => {
        const fnHandler: FirestoreEventHandler<I, O> = (data, context) => nestAppPromiseGetter().then(nest => handler(nest, data, context));
        return fnHandler;
      };

      return fn(handlerBuilder);
    };
  };
}

export type NestContextEventHandler<C, I = any, O = any> = (nest: C, data: I, context: EventContext) => Promise<O>;
export type NestContextEventHandlerBuilder<C, I = any, O = any> = (handler: NestContextEventHandler<C, I, O>) => FirestoreEventHandler<I, O>;

/**
 * Runnable function that is passed an arbitrary nest context object in addition to the usual data/context provided by firebase.
 */
export type OnEventWithNestContextBuilder<C, I = any, O = any> = (nest: NestContextEventHandlerBuilder<C, I, O>) => functions.CloudFunction<O>;

/**
 * Factory function for generating a firebase CloudFunction for a specific event.
 */
export type OnEventWithNestContextFactory<C> = <I, O = any>(fn: OnEventWithNestContextBuilder<C, I, O>) => NestApplicationFunctionFactory<functions.CloudFunction<O>>;

/**
 * Creates a factory for generating OnCallWithNestContext functions with a nest context object that is generated by the input function.
 * 
 * @param appFactory 
 * @param makeNestContext 
 * @returns 
 */
export function onEventWithNestContextFactory<C>(makeNestContext: MakeNestContext<C>): OnEventWithNestContextFactory<C> {
  return <I, O = any>(fn: OnEventWithNestContextBuilder<C, I, O>) => {
    return (nestAppPromiseGetter: NestApplicationPromiseGetter) => {
      const handlerBuilder: NestContextEventHandlerBuilder<C, I, O> = (handler) => {
        const fnHandler: FirestoreEventHandler<I, O> = (data, context) => nestAppPromiseGetter().then(nest => handler(makeNestContext(nest), data, context));
        return fnHandler;
      };

      return fn(handlerBuilder);
    };
  };
}
