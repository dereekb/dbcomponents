import { Getter } from '@dereekb/util';
import { INestApplication } from '@nestjs/common';
import * as functions from 'firebase-functions';
import { HttpsFunction, Runnable } from 'firebase-functions';

// MARK: Nest
/**
 * Runnable function that is passed an INestApplication in addition to the usual data/context provided by firebase.
 */
export type OnCallWithNestApp<I = any, O = any> = (nest: INestApplication, data: I, context: functions.https.CallableContext) => O;

/**
 * Factory function for generating HttpsFunctions/Runnable firebase function.
 */
export type OnCallWithNestAppFactory = <I, O>(fn: OnCallWithNestApp<I, O>) => HttpsFunction & Runnable<O>;

/**
 * Getter for an INestApplication promise. Nest should be initialized when the promise resolves.
 */
export type NestAppPromiseGetter = Getter<Promise<INestApplication>>;

/**
 * Creates a factory for generating OnCallWithNestApp functions.
 * 
 * @param nestAppPromiseGetter 
 * @returns 
 */
export function onCallWithNestApplicationFactory(nestAppPromiseGetter: NestAppPromiseGetter): OnCallWithNestAppFactory {
  return <I, O>(fn: OnCallWithNestApp<I, O>) => functions.https.onCall((data: I, context: functions.https.CallableContext) => nestAppPromiseGetter().then(x => fn(x, data, context)));
}

/**
 * Runnable function that is passed an arbitrary nest context object in addition to the usual data/context provided by firebase.
 */
export type OnCallWithNestContext<C, I = any, O = any> = (nestContext: C, data: I, context: functions.https.CallableContext) => O;

/**
 * Factory function for generating HttpsFunctions/Runnable firebase function that returns the value from the input OnCallWithNestContext function.
 */
export type OnCallWithNestContextFactory<C> = <I, O>(fn: OnCallWithNestContext<C, I, O>) => HttpsFunction & Runnable<O>;

/**
 * Getter for an INestApplication promise. Nest should be initialized when the promise resolves.
 */
export type MakeNestContext<C> = (nest: INestApplication) => C;

/**
 * Creates a factory for generating OnCallWithNestContext functions with a nest context object that is generated by the input function.
 * 
 * @param appFactory 
 * @param makeNestContext 
 * @returns 
 */
export function onCallWithNestContextFactory<C>(appFactory: OnCallWithNestAppFactory, makeNestContext: MakeNestContext<C>): OnCallWithNestContextFactory<C> {
  return <I, O>(fn: OnCallWithNestContext<C, I, O>) => {
    return appFactory<I, O>((nest, data, context) => fn(makeNestContext(nest), data, context));
  }
}

/**
 * Abstract class that wraps an INestApplication value.
 */
export abstract class AbstractNestContext {
  constructor(readonly nest: INestApplication) { }
}
