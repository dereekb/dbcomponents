import { INestApplicationContext } from '@nestjs/common';
import { CallableRequest } from 'firebase-functions/v2/https';
import { https } from 'firebase-functions/v2';
import { CallableHttpFunction } from '../../../function/type';
import { MakeNestContext, NestApplicationFunctionFactory, NestApplicationPromiseGetter } from '../../nest.provider';

// NOTE: If you're looking for onRequest handling, that is usually handled by Nest and configured with the top-level onRequest by passing express. There is no factory method.

// MARK: Nest
export type NestApplicationCallableHttpFunctionFactory<I, O = unknown> = NestApplicationFunctionFactory<CallableHttpFunction<I, O>>;

/**
 * Runnable function that is passed an INestApplicationContext in addition to the usual data/context provided by firebase.
 */
export type OnCallHandlerWithNestApplication<I = unknown, O = unknown> = (nest: INestApplicationContext, request: CallableRequest<I>) => O;

/**
 * Factory function for generating a NestApplicationFunctionFactory for a HttpsFunctions/Runnable firebase function.
 */
export type OnCallHandlerWithNestApplicationFactory = <I, O>(fn: OnCallHandlerWithNestApplication<I, O>) => NestApplicationCallableHttpFunctionFactory<I, O>;

/**
 * Creates a factory for generating OnCallWithNestApplication functions.
 * 
 * @param nestAppPromiseGetter 
 * @returns 
 */
export function onCallHandlerWithNestApplicationFactory(): OnCallHandlerWithNestApplicationFactory {
  return <I, O>(fn: OnCallHandlerWithNestApplication<I, O>) => {
    return (nestAppPromiseGetter: NestApplicationPromiseGetter) => https.onCall((request: CallableRequest<I>) => nestAppPromiseGetter().then(x => fn(x, request)));
  };
}

/**
 * Runnable function that is passed an arbitrary nest context object in addition to the usual data/context provided by firebase.
 */
export type OnCallHandlerWithNestContext<C, I = unknown, O = unknown> = (nestContext: C, request: CallableRequest<I>) => O;

/**
 * Factory function for generating HttpsFunctions/Runnable firebase function that returns the value from the input OnCallWithNestContext function.
 */
export type OnCallHandlerWithNestContextFactory<C> = <I, O>(fn: OnCallHandlerWithNestContext<C, I, O>) => NestApplicationCallableHttpFunctionFactory<I>;

/**
 * Creates a factory for generating OnCallWithNestContext functions with a nest context object that is generated by the input function.
 * 
 * @param appFactory 
 * @param makeNestContext 
 * @returns 
 */
export function onCallHandlerWithNestContextFactory<C>(appFactory: OnCallHandlerWithNestApplicationFactory, makeNestContext: MakeNestContext<C>): OnCallHandlerWithNestContextFactory<C> {
  return <I, O>(fn: OnCallHandlerWithNestContext<C, I, O>) => appFactory<I, O>((nest, request) => fn(makeNestContext(nest), request));
}
