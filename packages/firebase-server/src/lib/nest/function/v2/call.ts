import { CallableRequest } from 'firebase-functions/v2/https';
import { https } from 'firebase-functions/v2';
import { CallableHttpFunction } from '../../../function/type';
import { MakeNestContext, NestApplicationFunctionFactory, NestApplicationPromiseGetter } from '../../nest.provider';
import { OnCallWithNestApplication, OnCallWithNestContext, setNestContextOnRequest } from '../call';

// NOTE: If you're looking for onRequest handling, that is usually handled by Nest and configured with the top-level onRequest by passing express. There is no factory method.

// MARK: Nest
export type NestApplicationCallableHttpFunctionFactory<I, O = unknown> = NestApplicationFunctionFactory<CallableHttpFunction<I, O>>;

/**
 * Factory function for generating a NestApplicationFunctionFactory for a HttpsFunctions/Runnable firebase function.
 */
export type OnCallHandlerWithNestApplicationFactory = <I, O>(fn: OnCallWithNestApplication<I, O>) => NestApplicationCallableHttpFunctionFactory<I, O>;

/**
 * Creates a factory for generating OnCallWithNestApplication functions.
 *
 * @param nestAppPromiseGetter
 * @returns
 */
export function onCallHandlerWithNestApplicationFactory(opts: https.CallableOptions = {}): OnCallHandlerWithNestApplicationFactory {
  return <I, O>(fn: OnCallWithNestApplication<I, O>) => {
    return (nestAppPromiseGetter: NestApplicationPromiseGetter) =>
      https.onCall(opts, (request: CallableRequest<I>) =>
        nestAppPromiseGetter().then((nestApplication) =>
          fn({
            ...request,
            nestApplication
          })
        )
      );
  };
}
/**
 * Factory function for generating HttpsFunctions/Runnable firebase function that returns the value from the input OnCallWithNestContext function.
 */
export type OnCallHandlerWithNestContextFactory<C> = <I, O>(fn: OnCallWithNestContext<C, I, O>) => NestApplicationCallableHttpFunctionFactory<I>;

/**
 * Creates a factory for generating OnCallWithNestContext functions with a nest context object that is generated by the input function.
 *
 * @param appFactory
 * @param makeNestContext
 * @returns
 */
export function onCallHandlerWithNestContextFactory<C>(appFactory: OnCallHandlerWithNestApplicationFactory, makeNestContext: MakeNestContext<C>): OnCallHandlerWithNestContextFactory<C> {
  return <I, O>(fn: OnCallWithNestContext<C, I, O>) => appFactory<I, O>((request) => fn(setNestContextOnRequest(makeNestContext, request)));
}
