declare module "extra-set" {

/**
 * Adds value to set.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/add$)
 * @param x a set (updated)
 * @param v value
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([2, 4, 6, 8]);
 * add$(x, 40);
 * // Set(5) { 2, 4, 6, 8, 40 }
 * 
 * x;
 * // Set(5) { 2, 4, 6, 8, 40 }
 * 
 * var x = new Set([2, 4, 6, 8]);
 * add$(x, 80);
 * // Set(5) { 2, 4, 6, 8, 80 }
 * ```
 */
export function add$<T>(x: Set<T>, v: T): Set<T>;
/**
 * Adds value to set.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/add)
 * @param x a set
 * @param v value
 * @example
 * ```javascript
 * var x = new Set([2, 4, 6 ,8]);
 * add(x, 40);
 * // Set(5) { 2, 4, 6, 8, 40 }
 * 
 * add(x, 80);
 * // Set(5) { 2, 4, 6, 8, 80 }
 * ```
 */
export function add<T>(x: Iterable<T>, v: T): Set<T>;
export type arrayMapFn<T, U> = (v: T, i: number, x: Iterable<T>) => U;
export type compareFn<T> = (a: T, b: T) => number;
export type calledFn<T> = (v: T, k: T, x: Iterable<T>) => void;
export type testFn<T> = (v: T, k: T, x: Iterable<T>) => boolean;
export type mapFn<T, U> = (v: T, k: T, x: Iterable<T>) => T | U;
export type reduceFn<T, U> = (acc: U, v: T, k: T, x: Iterable<T>) => U;
/**
 * Lists cartesian product of sets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/cartesianProduct)
 * @param xs sets
 * @param fn map function (vs, vs)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * var y = new Set([10, 20]);
 * [...cartesianProduct([x, y])];
 * // [
 * //   Set(2) { 1, 10 },
 * //   Set(2) { 1, 20 },
 * //   Set(2) { 2, 10 },
 * //   Set(2) { 2, 20 },
 * //   Set(2) { 3, 10 },
 * //   Set(2) { 3, 20 }
 * // ]
 * 
 * [...cartesianProduct([x, y], a => max(a)[1])];
 * // [ 10, 20, 10, 20, 10, 20 ]
 * ```
 */
export function cartesianProduct<T, U = Set<T>>(xs: Set<T>[], fn?: mapFn<Set<T>, Set<T> | U>): IterableIterator<Set<T> | U>;
/**
 * Breaks set into chunks of given size.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/chunk)
 * @param x a set
 * @param n chunk size (1)
 * @param s chunk step (n)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5, 6, 7, 8]);
 * chunk(x, 3);
 * // [ Set(3) { 1, 2, 3 }, Set(3) { 4, 5, 6 }, Set(2) { 7, 8 } ]
 * 
 * chunk(x, 2, 3);
 * // [ Set(2) { 1, 2 }, Set(2) { 4, 5 }, Set(2) { 7, 8 } ]
 * 
 * chunk(x, 4, 3);
 * // [ Set(4) { 1, 2, 3, 4 }, Set(4) { 4, 5, 6, 7 }, Set(2) { 7, 8 } ]
 * ```
 */
export function chunk<T>(x: Set<T>, n?: number, s?: number): Set<T>[];
/**
 * Compares two sets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/compare)
 * @param x a set
 * @param y another set
 * @returns x=y: 0, otherwise: -ve/+ve
 * @example
 * ```javascript
 * var x = new Set([1, 2]);
 * var y = new Set([1, 2, 3]);
 * compare(x, y);
 * // -1
 * 
 * var y = new Set([1, 2]);
 * compare(x, y);
 * // 0
 * 
 * var y = new Set([1, -2]);
 * compare(x, y);
 * // 1
 * ```
 */
export function compare<T>(x: Set<T>, y: Set<T>): number;
/**
 * Appends values from sets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/concat$)
 * @param x a set (updated)
 * @param ys other sets
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2]);
 * var y = new Set([3, 4]);
 * concat$(x, y);
 * // Set(4) { 1, 2, 3, 4 }
 * 
 * x;
 * // Set(4) { 1, 2, 3, 4 }
 * 
 * var x = new Set([1, 2]);
 * var z = new Set([40, 50]);
 * concat$(x, y, z);
 * // Set(6) { 1, 2, 3, 4, 40, 50 }
 * ```
 */
export function concat$<T>(x: Set<T>, ...ys: Iterable<T>[]): Set<T>;
/**
 * Appends values from sets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/concat)
 * @param xs sets
 * @example
 * ```javascript
 * var x = new Set([1, 2]);
 * var y = new Set([3, 4]);
 * concat(x, y);
 * // Set(4) { 1, 2, 3, 4 }
 * 
 * var z = new Set([40, 50]);
 * concat(x, y, z);
 * // Set(6) { 1, 2, 3, 4, 40, 50 }
 * ```
 */
export function concat<T>(...xs: Iterable<T>[]): Set<T>;
/**
 * Counts values which satisfy a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/count)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * count(x, v => v % 2 === 1);
 * // 3
 * 
 * count(x, v => v % 2 === 0);
 * // 2
 * ```
 */
export function count<T>(x: Iterable<T>, ft: testFn<T>): number;
/**
 * Counts occurrences of values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/countAs)
 * @param x a set
 * @param fm map function (v, v, x)
 * @returns Map {value => count}
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * countAs(x, v => v % 3);
 * // Map(3) { 1 => 2, 2 => 2, 0 => 1 }
 * 
 * countAs(x, v => v % 2);
 * // Map(2) { 1 => 3, 0 => 2 }
 * ```
 */
export function countAs<T, U = T>(x: Iterable<T>, fm: mapFn<T, T | U>): Map<T | U, number>;
/**
 * Gives values of set not present in another.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/difference$)
 * @param x a set (updated)
 * @param y another set
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * var y = new Set([2, 4]);
 * difference$(x, y);
 * // Set(3) { 1, 3, 5 }
 * 
 * x;
 * // Set(3) { 1, 3, 5 }
 * 
 * var x = new Set([1, 2, 3, 4, 5]);
 * var y = new Set([2, -4]);
 * difference$(x, y);
 * // Set(4) { 1, 3, 4, 5 }
 * ```
 */
export function difference$<T>(x: Set<T>, y: Iterable<T>): Set<T>;
/**
 * Gives values of set not present in others.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/difference)
 * @param x a set
 * @param y another set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * var y = new Set([2, 4]);
 * difference(x, y);
 * // Set(3) { 1, 3, 5 }
 * 
 * var y = new Set([2, -4]);
 * difference(x, y);
 * // Set(4) { 1, 3, 4, 5 }
 * ```
 */
export function difference<T>(x: Set<T>, y: Set<T>): Set<T>;
/**
 * Removes first n values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/drop$)
 * @param x a set (updated)
 * @param n number of values (1)
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * drop$(x, 2);
 * // Set(3) { 3, 4, 5 }
 * 
 * x;
 * // Set(3) { 3, 4, 5 }
 * 
 * var x = new Set([1, 2, 3, 4, 5]);
 * drop$(x, 3);
 * // Set(2) { 4, 5 }
 * ```
 */
export function drop$<T>(x: Set<T>, n?: number): Set<T>;
/**
 * Removes first n values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/drop)
 * @param x a set
 * @param n number of values (1)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * drop(x, 2);
 * // Set(3) { 3, 4, 5 }
 * 
 * drop(x, 3);
 * // Set(2) { 4, 5 }
 * ```
 */
export function drop<T>(x: Iterable<T>, n?: number): Set<T>;
/**
 * Lists all value-value pairs.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/entries)
 * @param x a set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * [...entries(x)];
 * // [ [ 1, 1 ], [ 2, 2 ], [ 3, 3 ] ]
 * ```
 */
export function entries<T>(x: Set<T>): IterableIterator<[
	T,
	T
]>;
/**
 * Picks an arbitrary entry.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/entry)
 * @param x a set
 * @param r random seed 0->1
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * entry(x);
 * // [ 3, 3 ]
 * 
 * entry(x, 0.5);
 * // [ 2, 2 ]
 * ```
 */
export function entry<T>(x: Set<T>, r?: number): [
	T,
	T
];
/**
 * Checks if all values satisfy a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/every)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, -3, -4]);
 * every(x, v => v > 0);
 * // false
 * 
 * every(x, v => v > -10);
 * // true
 * ```
 */
export function every<T>(x: Iterable<T>, ft?: testFn<T>): boolean;
/**
 * Keeps values which pass a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/filter$)
 * @param x a set (updated)
 * @param ft test function (v, v, x)
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * filter$(x, v => v % 2 === 1);
 * // Set(3) { 1, 3, 5 }
 * 
 * x;
 * // Set(3) { 1, 3, 5 }
 * 
 * var x = new Set([1, 2, 3, 4, 5]);
 * filter$(x, v => v % 2 === 0);
 * // Set(2) { 2, 4 }
 * ```
 */
export function filter$<T>(x: Set<T>, ft: testFn<T>): Set<T>;
/**
 * Keeps values which pass a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/filter)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * filter(x, v => v % 2 === 1);
 * // Set(3) { 1, 3, 5 }
 * 
 * filter(x, v => v % 2 === 0);
 * // Set(2) { 2, 4 }
 * ```
 */
export function filter<T>(x: Set<T>, ft: testFn<T>): Set<T>;
/**
 * Gets set with given values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/filterAt$)
 * @param x a set (updated)
 * @param vs values
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * filterAt$(x, [1, 3, 5]);
 * // Set(3) { 1, 3, 5 }
 * 
 * x;
 * // Set(3) { 1, 3, 5 }
 * 
 * var x = new Set([1, 2, 3, 4, 5]);
 * filterAt$(x, [4, 6]);
 * // Set(1) { 4 }
 * ```
 */
export function filterAt$<T>(x: Set<T>, vs: T[]): Set<T>;
/**
 * Gets set with given values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/filterAt)
 * @param x a set
 * @param vs values
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * filterAt(x, [1, 3, 5]);
 * // Set(3) { 1, 3, 5 }
 * 
 * filterAt(x, [4, 6]);
 * // Set(1) { 4 }
 * ```
 */
export function filterAt<T>(x: Set<T>, vs: T[]): Set<T>;
/**
 * Finds a value passing s test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/find)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * find(x, v => v % 2 === 0);
 * // 2                             ^
 * 
 * find(x, v => v % 8 === 0);
 * // undefined
 * ```
 */
export function find<T>(x: Iterable<T>, ft: testFn<T>): T;
/**
 * Finds values passing a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/findAll)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * findAll(x, v => v % 2 === 0);
 * // [ 2, 4 ]                      ^                   ^
 * 
 * findAll(x, v => v % 8 === 0);
 * // []
 * ```
 */
export function findAll<T>(x: Iterable<T>, ft: testFn<T>): T[];
/**
 * Flattens nested set to given depth.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/flat)
 * @param x a nested set
 * @param n maximum depth (-1 => all)
 * @param fm map function (v, v, x)
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([
 *   new Set([1, 2]),
 *   new Set([3, new Set([4, new Set([5])])])
 * ]);
 * flat(x);
 * // Set(5) { 1, 2, 3, 4, 5 }
 * 
 * flat(x, 1);
 * // Set(4) { 1, 2, 3, Set(2) { 4, Set(1) { 5 } } }
 * 
 * flat(x, 2);
 * // Set(5) { 1, 2, 3, 4, Set(1) { 5 } }
 * ```
 */
export function flat<T = any>(x: Iterable<T>, n?: number, fm?: mapFn<T, any>, ft?: testFn<T>): Set<any>;
/**
 * Flattens nested set, using map function.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/flatMap)
 * @param x a nested set
 * @param fm map function (v, v, x)
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([
 *   new Set([1, 2]),
 *   new Set([3, new Set([4, new Set([5])])])
 * ]);
 * flatMap(x);
 * // Set(4) { 1, 2, 3, Set(2) { 4, Set(1) { 5 } } }
 * 
 * flatMap(x, v => flat(v, 1));
 * // Set(5) { 1, 2, 3, 4, Set(1) { 5 } }
 * 
 * flatMap(x, v => flat(v));
 * // Set(5) { 1, 2, 3, 4, 5 }
 * ```
 */
export function flatMap<T = any>(x: Iterable<T>, fm?: mapFn<T, any>, ft?: testFn<T>): Set<any>;
/**
 * Calls a function for each value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/forEach)
 * @param x a set
 * @param fc called function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, -3, -4]);
 * forEach(x, v => console.log(v));
 * // 1
 * // 2
 * // -3
 * // -4
 * ```
 */
export function forEach<T>(x: Iterable<T>, fc: calledFn<T>): void;
/**
 * Creates set from iterable.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/from$)
 * @param vs iterable (updatable if set)
 * @example
 * ```javascript
 * var vs = [1, 2, 3];
 * from$(vs);
 * // Set(3) { 1, 2, 3 }
 * 
 * var x = new Set([1, 2, 3]);
 * var a = from$(x);
 * // Set(3) { 1, 2, 3 } (=== x)
 * 
 * a.delete(3);
 * x;
 * // Set(2) { 1, 2 }
 * ```
 */
export function from$<T>(vs: Iterable<T>): Set<T>;
/**
 * Creates a set from values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/from)
 * @param vs values
 * @param fm map function (v, i, x)
 * @example
 * ```javascript
 * var vs = [1, 2, 3, 4];
 * from(vs);
 * // Set(4) { 1, 2, 3, 4 }
 * 
 * from(vs, v => v % 2);
 * // Set(2) { 1, 0 }
 * ```
 */
export function from<T, U = T>(vs: Iterable<T>, fm?: arrayMapFn<T, T | U>): Set<T | U>;
/**
 * Checks if set has a value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/has)
 * @param x a set
 * @param v value?
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * has(x, 3);
 * // true
 * 
 * has(x, 4);
 * // false
 * ```
 */
export function has<T>(x: Set<T>, v: T): boolean;
/**
 * Checks if set has a subset.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/hasSubset)
 * @param x a set
 * @param y subset?
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * var y = new Set([2, 4]);
 * hasSubset(x, y);
 * // true
 * 
 * var y = new Set([2, -4]);
 * hasSubset(x, y);
 * // false
 * ```
 */
export function hasSubset<T>(x: Set<T>, y: Iterable<T>): boolean;
/**
 * Gets first value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/head)
 * @param x a set
 * @param vd default value
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * head(x);
 * // 1
 * 
 * var x = new Set();
 * head(x, -1);
 * // -1
 * ```
 */
export function head<T>(x: Iterable<T>, vd?: T): T;
/**
 * Gives values present in both sets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/intersection$)
 * @param x a set (updated)
 * @param y another set
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * var y = new Set([2, 3, 5]);
 * intersection$(x, y);
 * // Set(2) { 2, 3 }
 * 
 * x;
 * // Set(2) { 2, 3 }
 * ```
 */
export function intersection$<T>(x: Set<T>, y: Set<T>): Set<T>;
/**
 * Gives values present in both sets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/intersection)
 * @param x a set
 * @param y another set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * var y = new Set([2, 3, 5]);
 * intersection(x, y);
 * // Set(2) { 2, 3 }
 * ```
 */
export function intersection<T>(x: Set<T>, y: Iterable<T>): Set<T>;
/**
 * Checks if value is set.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/is)
 * @param v value
 * @example
 * ```javascript
 * is(new Set([1, 2]));
 * // true
 * 
 * is(new Set());
 * // true
 * 
 * is(1);
 * // false
 * ```
 */
export function is<T>(v: any): v is Set<T>;
/**
 * Checks if sets have no common values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/isDisjoint)
 * @param x a set
 * @param y another set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * var y = new Set([3, 4]);
 * isDisjoint(x, y);
 * // false
 * 
 * var y = new Set([4]);
 * isDisjoint(x, y);
 * // true
 * ```
 */
export function isDisjoint<T>(x: Set<T>, y: Iterable<T>): boolean;
/**
 * Checks if set is empty.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/isEmpty)
 * @param x a set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * isEmpty(x);
 * // false
 * 
 * var x = new Set();
 * isEmpty(x);
 * // true
 * ```
 */
export function isEmpty<T>(x: Set<T>): boolean;
/**
 * Checks if two sets are equal.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/isEqual)
 * @param x a set
 * @param y another set
 * @example
 * ```javascript
 * var x = new Set([1, 2]);
 * var y = new Set([1, 2]);
 * isEqual(x, y);
 * // true
 * 
 * var y = new Set([11, 12]);
 * isEqual(x, y);
 * // false
 * ```
 */
export function isEqual<T>(x: Set<T>, y: Set<T>): boolean;
/**
 * Joins values together.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/join)
 * @param x a set
 * @param sep separator (,)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * join(x);
 * // "1,2,3"
 * 
 * join(x, ", ");
 * // "1, 2, 3"
 * ```
 */
export function join<T>(x: Iterable<T>, sep?: string): string;
/**
 * Gets size of set.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/length)
 * @param x a set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * length(x);
 * // 3
 * ```
 */
export function length<T>(x: Set<T>): number;
/**
 * Updates values based on map function.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/map$)
 * @param x a set (updated)
 * @param ft map function (v, v, x)
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * map$(x, v => v * 2);
 * // Set(4) { 2, 4, 6, 8 }
 * 
 * x;
 * // Set(4) { 2, 4, 6, 8 }
 * ```
 */
export function map$<T>(x: Set<T>, ft: mapFn<T, T>): Set<T>;
/**
 * Updates values based on map function.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/map)
 * @param x a set
 * @param ft map function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * map(x, v => v * 2);
 * // Set(4) { 2, 4, 6, 8 }
 * ```
 */
export function map<T, U = T>(x: Iterable<T>, ft: mapFn<T, T | U>): Set<T | U>;
/**
 * Finds largest entry.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/max)
 * @param x a set
 * @param fc compare function (a, b)
 * @param fm map function (v, v, x)
 * @returns [value, value]
 * @example
 * ```javascript
 * var x = new Set([1, 2, -3, -4]);
 * max(x);
 * // [ 2, 2 ]
 * 
 * max(x, (a, b) => Math.abs(a) - Math.abs(b));
 * // [ -4, -4 ]
 * 
 * max(x, null, v => Math.abs(v));
 * // [ -4, -4 ]
 * ```
 */
export function max<T, U = T>(x: Iterable<T>, fc?: compareFn<T | U>, fm?: mapFn<T, T | U>): [
	T,
	T
];
/**
 * Finds smallest entry.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/min)
 * @param x a set
 * @param fc compare function (a, b)
 * @param fm map function (v, v, x)
 * @returns [value, value]
 * @example
 * ```javascript
 * var x = new Set([1, 2, -3, -4]);
 * min(x);
 * // [ -4, -4 ]
 * 
 * min(x, (a, b) => Math.abs(a) - Math.abs(b));
 * // [ 1, 1 ]
 * 
 * min(x, null, v => Math.abs(v));
 * // [ 1, 1 ]
 * ```
 */
export function min<T, U = T>(x: Iterable<T>, fc?: compareFn<T | U>, fm?: mapFn<T, T | U>): [
	T,
	T
];
/**
 * Segregates values by test result.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/partition)
 * @param x a set
 * @param ft test function (v, v, x)
 * @returns [satisfies, doesnt]
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * partition(x, v => v % 2 == 0);
 * // [ Set(2) { 2, 4 }, Set(2) { 1, 3 } ]
 * 
 * var x = new Set([1, 2, 3, 4, 5]);
 * partition(x, v => v % 2 == 1);
 * // [ Set(3) { 1, 3, 5 }, Set(2) { 2, 4 } ]
 * ```
 */
export function partition<T>(x: Iterable<T>, ft: testFn<T>): [
	Set<T>,
	Set<T>
];
/**
 * Segregates values by similarity.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/partitionAs)
 * @param x a set
 * @param fm map function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * partitionAs(x, v => v % 2 === 0);
 * // Map(2) { false => Set(2) { 1, 3 }, true => Set(2) { 2, 4 } }
 * 
 * var x = new Set([1, 2, 3, 4, 5]);
 * partitionAs(x, v => v % 3);
 * // Map(3) {
 * //   1 => Set(2) { 1, 4 },
 * //   2 => Set(2) { 2, 5 },
 * //   0 => Set(1) { 3 }
 * // }
 * ```
 */
export function partitionAs<T, U = T>(x: Iterable<T>, fm: mapFn<T, T | U>): Map<T | U, Set<T>>;
/**
 * Finds smallest and largest entries.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/range)
 * @param x a set
 * @param fc compare function (a, b)
 * @param fm map function (v, v, x)
 * @returns [smallest, largest]
 * @example
 * ```javascript
 * var x = new Set([1, 2, -3, -4]);
 * range(x);
 * // [ [ -4, -4 ], [ 2, 2 ] ]
 * 
 * range(x, (a, b) => Math.abs(a) - Math.abs(b));
 * // [ [ 1, 1 ], [ -4, -4 ] ]
 * 
 * range(x, null, v => Math.abs(v));
 * // [ [ 1, 1 ], [ -4, -4 ] ]
 * ```
 */
export function range<T, U = T>(x: Iterable<T>, fc?: compareFn<T | U>, fm?: mapFn<T, T | U>): [
	[
		T,
		T
	],
	[
		T,
		T
	]
];
/**
 * Reduces values to a single value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/reduce)
 * @param x a set
 * @param fr reduce function (acc, v, v, x)
 * @param acc initial value
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * reduce(x, (acc, v) => acc+v);
 * // 10
 * 
 * reduce(x, (acc, v) => acc+v, 100);
 * // 110
 * ```
 */
export function reduce<T, U = T>(x: Iterable<T>, fr: reduceFn<T, T | U>, acc?: T | U): T | U;
/**
 * Discards values which pass a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/reject$)
 * @param x a set (updated)
 * @param ft test function (v, v, x)
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * reject$(x, v => v % 2 === 1);
 * // Set(2) { 2, 4 }
 * 
 * x;
 * // Set(2) { 2, 4 }
 * 
 * var x = new Set([1, 2, 3, 4, 5]);
 * reject$(x, v => v % 2 === 0);
 * // Set(3) { 1, 3, 5 }
 * ```
 */
export function reject$<T>(x: Set<T>, ft: testFn<T>): Set<T>;
/**
 * Discards values which pass a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/reject)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * reject(x, v => v % 2 === 1);
 * // Set(2) { 2, 4 }
 * 
 * reject(x, v => v % 2 === 0);
 * // Set(3) { 1, 3, 5 }
 * ```
 */
export function reject<T>(x: Iterable<T>, ft: testFn<T>): Set<T>;
/**
 * Gets set without given values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/rejectAt$)
 * @param x a set (updated)
 * @param vs values
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * rejectAt$(x, [1, 3, 5]);
 * // Set(2) { 2, 4 }
 * 
 * x;
 * // Set(2) { 2, 4 }
 * 
 * var x = new Set([1, 2, 3, 4, 5]);
 * rejectAt$(x, [4, 6]);
 * // Set(4) { 1, 2, 3, 5 }
 * ```
 */
export function rejectAt$<T>(x: Set<T>, vs: T[]): Set<T>;
/**
 * Gets set without given values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/rejectAt)
 * @param x a set
 * @param vs values
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4, 5]);
 * rejectAt(x, [1, 3, 5]);
 * // Set(2) { 2, 4 }
 * 
 * rejectAt(x, [4, 6]);
 * // Set(4) { 1, 2, 3, 5 }
 * ```
 */
export function rejectAt<T>(x: Iterable<T>, vs: T[]): Set<T>;
/**
 * Deletes a value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/remove$)
 * @param x a set (updated)
 * @param v value
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([2, 4, 6, 8]);
 * remove$(x, 4);
 * // Set(3) { 2, 6, 8 }
 * 
 * x;
 * // Set(3) { 2, 6, 8 }
 * 
 * var x = new Set([2, 4, 6, 8]);
 * remove$(x, 8);
 * // Set(3) { 2, 4, 6 }
 * ```
 */
export function remove$<T>(x: Set<T>, v: T): Set<T>;
/**
 * Deletes a value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/remove)
 * @param x a set
 * @param v value
 * @example
 * ```javascript
 * var x = new Set([2, 4, 6, 8]);
 * remove(x, 4);
 * // Set(3) { 2, 6, 8 }
 * 
 * remove(x, 8);
 * // Set(3) { 2, 4, 6 }
 * ```
 */
export function remove<T>(x: Iterable<T>, v: T): Set<T>;
/**
 * Finds first value passing a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/scanUntil)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * scanUntil(x, v => v % 2 === 0);
 * // 2                ^
 * 
 * scanUntil(x, v => v % 8 === 0);
 * // undefined
 * ```
 */
export function scanUntil<T>(x: Iterable<T>, ft: testFn<T>): T;
/**
 * Finds first value not passing a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/scanWhile)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * scanWhile(x, v => v % 2 !== 0);
 * // 2                ^
 * 
 * scanWhile(x, v => v % 8 !== 0);
 * // undefined
 * ```
 */
export function scanWhile<T>(x: Iterable<T>, ft: testFn<T>): T;
/**
 * Finds a value passing a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/search)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * search(x, v => v % 2 === 0);
 * // 2                ^
 * 
 * search(x, v => v % 8 === 0);
 * // undefined
 * ```
 */
export function search<T>(x: Iterable<T>, ft: testFn<T>): T;
/**
 * Finds values passing a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/searchAll)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * searchAll(x, v => v % 2 === 0);
 * // [ 2, 4 ]         ^     ^
 * 
 * searchAll(x, v => v % 8 === 0);
 * // []
 * ```
 */
export function searchAll<T>(x: Iterable<T>, ft: testFn<T>): T[];
/**
 * Removes first value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/shift$)
 * @param x a set (updated)
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * shift$(x);
 * // Set(2) { 2, 3 }
 * 
 * x;
 * // Set(2) { 2, 3 }
 * 
 * shift$(x);
 * // Set(1) { 3 }
 * ```
 */
export function shift$<T>(x: Set<T>): Set<T>;
/**
 * Removes first value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/shift)
 * @param x a set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * shift(x);
 * // Set(2) { 2, 3 }
 * 
 * var x = new Set([1, 2, 3, 4]);
 * shift(x);
 * // Set(3) { 2, 3, 4 }
 * ```
 */
export function shift<T>(x: Iterable<T>): Set<T>;
/**
 * Gets size of set.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/size)
 * @param x a set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * size(x);
 * // 3
 * ```
 */
export function size<T>(x: Set<T>): number;
/**
 * Checks if any value satisfies a test.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/some)
 * @param x a set
 * @param ft test function (v, v, x)
 * @example
 * ```javascript
 * var x = new Set([1, 2, -3, -4]);
 * some(x, v => v > 10);
 * // false
 * 
 * some(x, v => v < 0);
 * // true
 * ```
 */
export function some<T>(x: Iterable<T>, ft?: testFn<T>): boolean;
/**
 * Picks an arbitrary subset.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/subset)
 * @param x a set
 * @param n number of values (-1 => any)
 * @param r random seed 0->1
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * subset(x);
 * // Set(2) { 1, 3 }
 * 
 * subset(x, 3, 0.3);
 * // Set(3) { 1, 2, 4 }
 * 
 * subset(x, 2, 0.3);
 * // Set(2) { 2, 4 }
 * ```
 */
export function subset<T>(x: Iterable<T>, n?: number, r?: number): Set<T>;
/**
 * Lists all possible subsets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/subsets)
 * @param x a set
 * @param n number of values (-1 => any)
 * @example
 * ```javascript
 * var x = new Set([1, 2]);
 * [...subsets(x)];
 * // [ Set(0) {}, Set(1) { 1 }, Set(1) { 2 }, Set(2) { 1, 2 } ]
 * 
 * var x = new Set([1, 2, 3]);
 * [...subsets(x)];
 * // [
 * //   Set(0) {},
 * //   Set(1) { 1 },
 * //   Set(1) { 2 },
 * //   Set(2) { 1, 2 },
 * //   Set(1) { 3 },
 * //   Set(2) { 1, 3 },
 * //   Set(2) { 2, 3 },
 * //   Set(3) { 1, 2, 3 }
 * // ]
 * ```
 */
export function subsets<T>(x: Iterable<T>, n?: number): IterableIterator<Set<T>>;
/**
 * Gives values not present in both sets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/symmetricDifference$)
 * @param x a set (updated)
 * @param y another set
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * var y = new Set([3, 4, 5, 6]);
 * symmetricDifference$(x, y);
 * // Set(4) { 1, 2, 5, 6 }
 * 
 * x;
 * // Set(4) { 1, 2, 5, 6 }
 * 
 * var x = new Set([1, 2, 3, 4]);
 * var y = new Set([4, 5, 6]);
 * symmetricDifference$(x, y);
 * // Set(5) { 1, 2, 3, 5, 6 }
 * ```
 */
export function symmetricDifference$<T>(x: Set<T>, y: Iterable<T>): Set<T>;
/**
 * Gives values not present in both sets.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/symmetricDifference)
 * @param x a set
 * @param y another set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * var y = new Set([3, 4, 5, 6]);
 * symmetricDifference(x, y);
 * // Set(4) { 1, 2, 5, 6 }
 * 
 * var y = new Set([4, 5, 6]);
 * symmetricDifference(x, y);
 * // Set(5) { 1, 2, 3, 5, 6 }
 * ```
 */
export function symmetricDifference<T>(x: Set<T>, y: Set<T>): Set<T>;
/**
 * Gets set without the first value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/tail)
 * @param x a set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * tail(x);
 * // Set(2) { 2, 3 }
 * 
 * var x = new Set([1]);
 * tail(x);
 * // Set(0) {}
 * ```
 */
export function tail<T>(x: Iterable<T>): Set<T>;
/**
 * Keeps first n values only.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/take$)
 * @param x a set (updated)
 * @param n number of values (1)
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * take$(x, 2);
 * // Set(2) { 1, 2 }
 * 
 * x;
 * // Set(2) { 1, 2 }
 * 
 * var x = new Set([1, 2, 3, 4]);
 * take$(x, 3);
 * // Set(3) { 1, 2, 3 }
 * ```
 */
export function take$<T>(x: Set<T>, n?: number): Set<T>;
/**
 * Keeps first n values only.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/take)
 * @param x a set
 * @param n number of values (1)
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3, 4]);
 * take(x, 2);
 * // Set(2) { 1, 2 }
 * 
 * take(x, 3);
 * // Set(3) { 1, 2, 3 }
 * ```
 */
export function take<T>(x: Iterable<T>, n?: number): Set<T>;
/**
 * Gives values present in any set.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/union$)
 * @param x a set (updated)
 * @param y another set
 * @returns x
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * var y = new Set([2, 3, 4]);
 * union$(x, y);
 * // set(4) { "a" => 1, "b" => 2, "c" => 3, "d" => 40 }
 * 
 * x;
 * // set(4) { "a" => 1, "b" => 2, "c" => 3, "d" => 40 }
 * ```
 */
export function union$<T>(x: Set<T>, y: Iterable<T>): Set<T>;
/**
 * Gives values present in any set.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/union)
 * @param x a set
 * @param y another set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * var y = new Set([2, 3, 4]);
 * union(x, y);
 * // Set(4) { 1, 2, 3, 4 }
 * ```
 */
export function union<T>(x: Iterable<T>, y: Iterable<T>): Set<T>;
/**
 * Picks an arbitrary value.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/value)
 * @param x a set
 * @param r random seed 0->1
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * value(x);
 * // 3
 * 
 * value(x, 0.5);
 * // 2
 * ```
 */
export function value<T>(x: Iterable<T>, r?: number): T;
/**
 * Lists all values.
 * [ðŸ“˜](https://github.com/nodef/extra-set/wiki/values)
 * @param x a set
 * @example
 * ```javascript
 * var x = new Set([1, 2, 3]);
 * [...values(x)];
 * // [ 1, 2, 3 ]
 * ```
 */
export function values<T>(x: Iterable<T>): IterableIterator<T>;

export {};
}
